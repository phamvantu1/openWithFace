<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Card Management</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        table { width: 100%; border-collapse: collapse; }
        table, th, td { border: 1px solid #ddd; padding: 8px; }
        th { background-color: #f2f2f2; }
        .button { padding: 10px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }
        .button.delete { background-color: #f44336; }
        .button.edit { background-color: #ff9800; }
        .form-container { margin-top: 20px; }
        /* Modal styling */
        .modal {
            display: none;
            position: fixed;
            top: 0; left: 0; width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            width: 300px;
        }
    </style>
</head>
<body>
    <h1>Card Management</h1>

    <!-- Button to add new card -->
    <button class="button" onclick="openModal('addModal')">Add New Card</button>

    <!-- Table to display cards -->
    <table id="cardTable">
        <thead>
            <tr>
                <th>Card ID</th>
                <th>Card Name</th>
                <th>Card Number</th>
                <th>Username</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Cards will be populated here -->
        </tbody>
    </table>

    <!-- Edit Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <h2>Edit Card</h2>
            <form id="editForm">
                <input type="hidden" id="editCardId">
                <label for="editCardName">Card Name: </label>
                <input type="text" id="editCardName" required><br>
                <label for="editCardNumber">Card Number: </label>
                <input type="text" id="editCardNumber" required><br>
                <button type="submit" class="button">Save Changes</button>
                <button type="button" onclick="closeModal('editModal')">Cancel</button>
            </form>
        </div>
    </div>

    <!-- Add Modal -->
    <div id="addModal" class="modal">
        <div class="modal-content">
            <h2>Add New Card</h2>
            <form id="addForm">
                <label for="addCardName">Card Name: </label>
                <input type="text" id="addCardName" required><br>
                <label for="addCardNumber">Card Number: </label>
                <input type="text" id="addCardNumber" required><br>
                <button type="submit" class="button">Add Card</button>
                <button type="button" onclick="closeModal('addModal')">Cancel</button>
            </form>
        </div>
    </div>

    <script>
        const token = localStorage.getItem('authToken');

        function getHeaders() {
            return {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
            };
        }

        // Open modal
        function openModal(modalId) {
            document.getElementById(modalId).style.display = 'flex';
        }

        // Close modal
        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Fetch all cards and display them
        async function fetchCards() {
            const response = await fetch('/api/get-all-cards', { headers: getHeaders() });
            const data = await response.json();
            const tbody = document.querySelector('#cardTable tbody');
            tbody.innerHTML = '';

            for (const card of data.data) {
                const username = await getUsernameById(card.user_id);
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${card.id}</td>
                    <td>${card.ten}</td>
                    <td>${card.id_the}</td>
                    <td>${username}</td>
                    <td>
                        <button class="button edit" onclick="openEditModal(${card.id})">Edit</button>
                        <button class="button delete" onclick="deleteCard(${card.id})">Delete</button>
                    </td>
                `;
                tbody.appendChild(row);
            }
        }

        // Get username by user ID
        async function getUsernameById(userId) {
            try {
                const response = await fetch(`/api/getuserById/${userId}`, { headers: getHeaders() });
                const data = await response.json();
                return data.status === 'success' ? data.data : 'N/A';
            } catch {
                return 'N/A';
            }
        }

        // Open Edit Modal
        async function openEditModal(cardId) {
            const response = await fetch(`/api/getcardById/${cardId}`, { headers: getHeaders() });
            const data = await response.json();

            document.getElementById('editCardId').value = data.data.id;
            document.getElementById('editCardName').value = data.data.ten;
            document.getElementById('editCardNumber').value = data.data.id_the;
            openModal('editModal');
        }

        // Edit Card
        document.getElementById('editForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const id = document.getElementById('editCardId').value;
            const ten = document.getElementById('editCardName').value;
            const id_the = document.getElementById('editCardNumber').value;

            await fetch(`/api/update-card/${id}`, {
                method: 'PUT',
                headers: getHeaders(),
                body: JSON.stringify({ ten, id_the })
            });

            closeModal('editModal');
            fetchCards();
        });

        // Add Card
        document.getElementById('addForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const ten = document.getElementById('addCardName').value;
            const id_the = document.getElementById('addCardNumber').value;

            await fetch('/api/create-card', {
                method: 'POST',
                headers: getHeaders(),
                body: JSON.stringify({ ten, id_the })
            });

            closeModal('addModal');
            fetchCards();
        });

        // Delete Card
        async function deleteCard(id) {
            if (confirm('Are you sure you want to delete this card?')) {
                await fetch(`/api/delete-card/${id}`, {
                    method: 'DELETE',
                    headers: getHeaders()
                });
                fetchCards();
            }
        }

        // Fetch cards on page load
        document.addEventListener('DOMContentLoaded', fetchCards);
    </script>
</body>
</html>
